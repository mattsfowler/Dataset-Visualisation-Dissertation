#Load raw csv file (does not contain a header row, and is not normalised)
#community = read.csv(file = 'CommunityData.csv', header=FALSE, col.names=header_data)
community = read.csv(file = "head_CommViolPredUnnormalizedData.csv", header=TRUE)
View(community)
#Normalise all values
numeric_cols <- unlist(lapply(community, is.numeric))
community.std <- scale(community[,numeric_cols])
#Show a histogram of the column "percentage unemployment"
#Only using a single column, so can use un-normalised table
hist_unemploy <- ggplot(community, aes(x=pctUnemploy)) +
geom_histogram() +
labs(title="Percentage Unemployment by Community", x ="Unemployment (%)", y = "Number of Communities") +
theme_minimal()
library(ggplot2)
#library(BBmisc)
library(dplyr)
#Show a histogram of the column "percentage unemployment"
#Only using a single column, so can use un-normalised table
hist_unemploy <- ggplot(community, aes(x=pctUnemploy)) +
geom_histogram() +
labs(title="Percentage Unemployment by Community", x ="Unemployment (%)", y = "Number of Communities") +
theme_minimal()
hist_unemploy
#Show a histogram of the column "percentage unemployment"
#Only using a single column, so can use un-normalised table
hist_unemploy <- ggplot(community, aes(x=pctUnemploy)) +
geom_histogram(binwidth = 20) +
labs(title="Percentage Unemployment by Community", x ="Unemployment (%)", y = "Number of Communities") +
theme_minimal()
hist_unemploy
#Show a histogram of the column "percentage unemployment"
#Only using a single column, so can use un-normalised table
hist_unemploy <- ggplot(community, aes(x=pctUnemploy)) +
geom_histogram(binwidth = 5) +
labs(title="Percentage Unemployment by Community", x ="Unemployment (%)", y = "Number of Communities") +
theme_minimal()
hist_unemploy
#Show a histogram of the column "percentage unemployment"
#Only using a single column, so can use un-normalised table
hist_unemploy <- ggplot(community, aes(x=pctUnemploy)) +
geom_histogram(binwidth = 1) +
labs(title="Percentage Unemployment by Community", x ="Unemployment (%)", y = "Number of Communities") +
theme_minimal()
hist_unemploy
#Show a histogram of the column "percentage unemployment"
#Only using a single column, so can use un-normalised table
hist_unemploy <- ggplot(community, aes(x=pctUnemploy)) +
geom_histogram(binwidth = 2) +
labs(title="Percentage Unemployment by Community", x ="Unemployment (%)", y = "Number of Communities") +
theme_minimal()
hist_unemploy
#Show a histogram of the column "percentage unemployment"
#Only using a single column, so can use un-normalised table
hist_unemploy <- ggplot(community, aes(x=pctUnemploy)) +
geom_histogram(binwidth = 0.5) +
labs(title="Percentage Unemployment by Community", x ="Unemployment (%)", y = "Number of Communities") +
theme_minimal()
hist_unemploy
#Show a histogram of the column "percentage unemployment"
#Only using a single column, so can use un-normalised table
hist_unemploy <- ggplot(community, aes(x=pctUnemploy)) +
geom_histogram(binwidth = 0.25) +
labs(title="Percentage Unemployment by Community", x ="Unemployment (%)", y = "Number of Communities") +
theme_minimal()
hist_unemploy
#Show a histogram of the column "percentage unemployment"
#Only using a single column, so can use un-normalised table
hist_unemploy <- ggplot(community, aes(x=pctUnemploy)) +
geom_histogram(binwidth = 1) +
labs(title="Percentage Unemployment by Community", x ="Unemployment (%)", y = "Number of Communities") +
theme_minimal()
hist_unemploy
#Show a histogram of the column "percentage unemployment"
#Only using a single column, so can use un-normalised table
hist_unemploy <- ggplot(community, aes(x=pctUnemploy)) +
geom_histogram(binwidth = 0.5) +
labs(title="Percentage Unemployment by Community", x ="Unemployment (%)", y = "Number of Communities") +
theme_minimal()
hist_unemploy
#Show a histogram of the column "percentage unemployment"
#Only using a single column, so can use un-normalised table
hist_unemploy <- ggplot(community, aes(x=pctUnemploy)) +
geom_histogram(binwidth = 0.5) +
labs(title="Percentage Unemployment by Community", y = "Number of Communities") +
scale_x_continuous(name="Unemployment (%)", breaks = 5) +
theme_minimal()
hist_unemploy
scale_x_continuous(name="Unemployment (%)", breaks = c(5, 10, 15, 20, 25, 30) +
#Show a histogram of the column "percentage unemployment"
#Only using a single column, so can use un-normalised table
hist_unemploy <- ggplot(community, aes(x=pctUnemploy)) +
geom_histogram(binwidth = 0.5) +
labs(title="Percentage Unemployment by Community", y = "Number of Communities") +
scale_x_continuous(name="Unemployment (%)", breaks = c(5, 10, 15, 20, 25, 30)) +
theme_minimal()
hist_unemploy
#Show a histogram of the column "percentage unemployment"
#Only using a single column, so can use un-normalised table
hist_unemploy <- ggplot(community, aes(x=pctUnemploy)) +
geom_histogram(binwidth = 0.5) +
labs(title="Percentage Unemployment by Community", y = "Number of Communities") +
scale_x_continuous(name="Unemployment (%)", breaks = c(5, 10, 15, 20, 25, 30)) +
theme_minimal()
hist_unemploy
#Show a histogram of the column "percentage unemployment"
#Only using a single column, so can use un-normalised table
hist_unemploy <- ggplot(community, aes(x=pctUnemploy)) +
geom_histogram(binwidth = 0.5) +
labs(title="Percentage Unemployment by Community", y = "Number of Communities") +
scale_x_continuous(name="Unemployment (%)", breaks = seq(0 , 100, 5)) +
theme_minimal()
hist_unemploy
#Show a histogram of the column "percentage unemployment"
#Only using a single column, so can use un-normalised table
hist_unemploy <- ggplot(community, aes(x=pctUnemploy)) +
geom_histogram(binwidth = 0.5) +
labs(title="Percentage Unemployment by Community", y = "Number of Communities") +
scale_x_continuous(name="Unemployment (%)", breaks = seq(0 , 100, 2.5)) +
theme_minimal()
hist_unemploy
#pctUnemploy pctPoverty
sctr_unemploy_poverty <- ggplot(community, aes(x=pctPoverty, y=pctUnemploy)) +
geom_point()
sctr_unemploy_poverty
print(hist_unemploy)
print(sctr_unemploy_poverty)
install.packages("somplot")
install.packages("som")
?normalize
library(som)
?normalize
?som.train
library(somplot)
library(hexbin)
library(somplot)
?som.plot
#Get dataset
data("World")
library(sf)
library(tmap)
library(som)
library(hexbin)
library(somplot)
#Get dataset
data("World")
numeric_cols <- unlist(lapply(World, is.numeric))
numeric_cols[1] <- TRUE #(keep the id column)
World.matrix <- World[,numeric_cols]
World.matrix$geometry <- NULL #(don't need the geometry for now)
#Normalise
World.matrix <- normalize(World.matrix)
#Convert to a matrix of only numeric columns
numeric_cols <- unlist(lapply(World, is.numeric))
#numeric_cols[1] <- TRUE #(keep the id column)
World.matrix <- World[,numeric_cols]
World.matrix$geometry <- NULL #(don't need the geometry for now)
#Normalise
World.matrix <- normalize(World.matrix)
View(World.matrix)
xdim <- ncol(World.matrix)
ydim <- nrow(World.matrix)
som_matrix <- som.init(World.matrix, xdim, ydim, init="linear")
?som.init
ydim <- ncol(World.matrix)
xdim <- nrow(World.matrix)
som_matrix <- som.init(World.matrix, xdim, ydim, init="linear")
xdim <- ncol(World.matrix)
ydim <- nrow(World.matrix)
?som
obj <- som(World.matrix, xdim, ydim, init="linear", alpha=NULL, alphaType="inverse",
neigh="gaussian", topol="rect", radius=NULL, rlen=NULL, err.radius=1,
inv.alp.c=NULL)
View(World.matrix)
View(World)
#Normalise
World.matrix <- World.matrix[,5:8] #only use "life expectancy", wellbeing", "footprint" and "inequality"
View(World.matrix)
World.matrix <- na.omit(World.matrix) #remove any row with a null value
View(World.matrix)
som_matrix <- som.init(World.matrix, xdim, ydim, init="linear")
obj <- som.train(World.matrix, som_matrix, xdim, ydim, alpha=NULL, alphaType="inverse",
neigh="gaussian", topol="rect", radius=NULL, rlen=NULL, err.radius=1, inv.alp.c=NULL)
View(som_matrix)
View(World.matrix)
World.matrix <- normalize(World.matrix)
View(World.matrix)
?normalize
som_matrix <- som.init(World.matrix, xdim, ydim, init="linear")
obj <- som.train(World.matrix, som_matrix, xdim, ydim, alpha=NULL, alphaType="inverse",
neigh="gaussian", topol="rect", radius=NULL, rlen=NULL, err.radius=1, inv.alp.c=NULL)
obj <- som(World.matrix, xdim, ydim, init="linear", alpha=NULL, alphaType="inverse",
neigh="gaussian", topol="rect", radius=NULL, rlen=NULL, err.radius=1,
inv.alp.c=NULL)
View(World.matrix)
?real
xdim <- as.numeric(ncol(World.matrix))
ydim <- as.numeric(nrow(World.matrix))
obj <- som(World.matrix, xdim, ydim, init="linear", alpha=NULL, alphaType="inverse",
neigh="gaussian", topol="rect", radius=NULL, rlen=NULL, err.radius=1,
inv.alp.c=NULL)
som_map <- som.project(obj, newdat)
?som.project
som.plot(som_map, World)
som.plot(som_map, World.matrix)
som_map <- som.project(obj, World)
source('D:/Matt/Documents/GitRepos/Dataset-Visualisation-Dissertation/R/Visualisations/WorldVisualiser.R', echo=TRUE)
som.plot(som_map, World.matrix)
?som.plot
View(som_map)
plot(som_map)
plot(som_map[,'x'], som_map[,'y'])
install.packages("kohonen")
library(kohonen)
?kohonen
?map.kohonen
data(wines)
View(wines)
set.seed(7)
training <- sample(nrow(wines), 150)
Xtraining <- scale(wines[training, ])
somnet <- som(Xtraining, somgrid(5, 5, "hexagonal"))
map(somnet,
scale(wines[-training, ],
center=attr(Xtraining, "scaled:center"),
scale=attr(Xtraining, "scaled:scale")))
?plot.kohonen
kohmap <- xyf(scale(wines), vintages,
grid = somgrid(5, 5, "hexagonal"), rlen=100)
View(kohmap)
plot(kohmap, type="changes")
sommap <- som(scale(wines),grid = somgrid(6, 4, "rectangular"))
plot(sommap, type="dist.neighbours", main = "SOM neighbour distances")
## use hierarchical clustering to cluster the codebook vectors
som.hc <- cutree(hclust(object.distances(sommap, "codes")), 5)
add.cluster.boundaries(sommap, som.hc)
kohmap <- xyf(scale(wines), vintages,
grid = somgrid(5, 5, "hexagonal"), rlen=100)
plot(kohmap, type="changes")
counts <- plot(kohmap, type="counts", shape = "straight")
## show both sets of codebook vectors in the map
par(mfrow = c(1,2))
plot(kohmap, type="codes", main = c("Codes X", "Codes Y"))
par(mfrow = c(1,1))
similarities <- plot(kohmap, type="quality", palette.name = terrain.colors)
plot(kohmap, type="mapping",
labels = as.integer(vintages), col = as.integer(vintages),
main = "mapping plot")
## add background colors to units according to their predicted class labels
xyfpredictions <- classmat2classvec(getCodes(kohmap, 2))
bgcols <- c("gray", "pink", "lightgreen")
plot(kohmap, type="mapping", col = as.integer(vintages),
pchs = as.integer(vintages), bgcol = bgcols[as.integer(xyfpredictions)],
main = "another mapping plot", shape = "straight", border = NA)
## Show 'component planes'
set.seed(7)
sommap <- som(scale(wines), grid = somgrid(6, 4, "hexagonal"))
plot(sommap, type = "property", property = getCodes(sommap, 1)[,1],
main = colnames(getCodes(sommap, 1))[1])
## Show the U matrix
Umat <- plot(sommap, type="dist.neighbours", main = "SOM neighbour distances")
## use hierarchical clustering to cluster the codebook vectors
som.hc <- cutree(hclust(object.distances(sommap, "codes")), 5)
add.cluster.boundaries(sommap, som.hc)
## and the same for rectangular maps
set.seed(7)
sommap <- som(scale(wines),grid = somgrid(6, 4, "rectangular"))
plot(sommap, type="dist.neighbours", main = "SOM neighbour distances")
## use hierarchical clustering to cluster the codebook vectors
som.hc <- cutree(hclust(object.distances(sommap, "codes")), 5)
add.cluster.boundaries(sommap, som.hc)
data(wines)
set.seed(7)
kohmap <- xyf(scale(wines), vintages,
grid = somgrid(5, 5, "hexagonal"), rlen=100)
plot(kohmap, type="changes")
counts <- plot(kohmap, type="counts", shape = "straight")
## show both sets of codebook vectors in the map
par(mfrow = c(1,2))
plot(kohmap, type="codes", main = c("Codes X", "Codes Y"))
par(mfrow = c(1,1))
similarities <- plot(kohmap, type="quality", palette.name = terrain.colors)
plot(kohmap, type="mapping",
labels = as.integer(vintages), col = as.integer(vintages),
main = "mapping plot")
## add background colors to units according to their predicted class labels
xyfpredictions <- classmat2classvec(getCodes(kohmap, 2))
bgcols <- c("gray", "pink", "lightgreen")
plot(kohmap, type="mapping", col = as.integer(vintages),
pchs = as.integer(vintages), bgcol = bgcols[as.integer(xyfpredictions)],
main = "another mapping plot", shape = "straight", border = NA)
?xyf
library(sf)
library(tmap)
library(som)
library(hexbin)
library(somplot)
library(kohonen)
worldxy <- read_csv("WorldCoords.csv")
worldxy <- read.csv("WorldCoords.csv")
View(worldxy)
worldxy <- read.csv("WorldCoords.csv")
View(worldxy)
worldxy <- read.csv("WorldCoords.csv")
View(worldxy)
plot(worldxy$coords_x, worldxy$coords_y, main = "Ecenomic Development",
xlab = "X", ylab = "y")
worldxy <- read.csv("WorldCoords.csv")
plot(worldxy$coords_x, worldxy$coords_y, main = "Ecenomic Development",
xlab = "X", ylab = "y")
worldxy <- read.csv("WorldCoords.csv")
plot(worldxy$coords_x, worldxy$coords_y, main = "Ecenomic Development",
xlab = "X", ylab = "y")
library(sf)
library(tmap)
data("World")
tmap_mode("view")
w <- tm_shape(World) +
tm_polygons("HPI")
View(w)
library(sf)
library(tmap)
data("World")
tmap_mode("view")
w <- tm_shape(World) +
tm_polygons("HPI")
View(w)
library(tmap)
data("World")
tm_shape(World) +
tm_polygons("HPI")
write.csv(w, "HPI")
library(tmap)
data("World")
w <-tm_shape(World) +
tm_polygons("HPI")
tmap_save(w)
